generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  Product    Product[]   @relation("StoreToProduct")
}

model Billboard {
  id String @id @default(uuid())

  label    String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToBillboard", fields: [storeId], references: [id])
  storeId String

  categories Category[]

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId String

  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String

  products Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])
  storeId String

  products Product[]

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])
  storeId String

  products Product[]

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())

  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  color   Color   @relation(fields: [colorId], references: [id])
  colorId String
  size    Size    @relation(fields: [sizeId], references: [id])
  sizeId  String
  images  Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])
  storeId String

  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId String

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
